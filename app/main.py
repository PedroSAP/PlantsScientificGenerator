# PLANTSSCIENTIFICGENERATOR

# GOAL:
# Create an API where the user sends a sentence containing a plant's common name,
# and receives back its scientific name, generated by a public LLM.

# REQUIREMENTS (to be added in requirements.txt):
# fastapi
# uvicorn
# transformers

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import pipeline

# 1. Initialize FastAPI app
app = FastAPI(title="PlantsScientificGenerator")

# 2. Load a public LLM from Hugging Face
llm = pipeline("text-generation", model="google/flan-t5-base", tokenizer="google/flan-t5-base")

# 3. Request model
class PlantSentenceRequest(BaseModel):
    user_sentence: str

# 4. Helper function to extract the plant's common name from a sentence
def extract_common_name(sentence):
    prompt = f"From this sentence, what is the common plant name mentioned: '{sentence}'? Respond only with the name."
    response = llm(prompt, max_new_tokens=30, do_sample=True, truncation=True)[0]['generated_text']
    return response.strip()

# 5. Function to retrieve the scientific name from a common name
def get_scientific_name(common_name):
    prompt = f"What is the scientific name of the plant known as '{common_name}'?"
    response = llm(prompt, max_new_tokens=50, do_sample=True, truncation=True)[0]['generated_text']
    return response.strip()

# 6. Main endpoint
@app.post("/scientific-name")
async def generate_scientific_name_from_sentence(plant: PlantSentenceRequest):
    common_name = extract_common_name(plant.user_sentence)
    scientific_name = get_scientific_name(common_name)
    return {
        "original_sentence": plant.user_sentence,
        "detected_common_name": common_name,
        "scientific_name": scientific_name
    }
